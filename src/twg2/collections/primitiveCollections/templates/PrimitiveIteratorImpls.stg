PrimitiveIteratorImpls(var) ::= <<
package $var.packageName$;

/** A $var.type$ array {@link java.util.ListIterator\} that supports {@link #previous\} and {@link #set\}.
 * {@link #add\} and {@link #remove\} are not supported.<br>
 *
 * <h4><a name="synchronization">Synchronization</a></h4>
 * This class is not thread safe, because the {@code $var.collectionType$\} passed to the constructor is not copied.
 * The only synchronization consideration is the internal {@code volatile modCached} counter.
 * <br><br>
 *
 * @author TeamworkGuy2
 * @since 2015-1-17
 */
@javax.annotation.Generated("StringTemplate")
public class $var.className$ implements $var.implementClassNames:{x | $x$}; separator=", "$ {
$if(var.hasOwnMod)$	private int mod = 0;
$endif$	private volatile int modCached = 0;
	private $var.collectionType$ col;
	private int off;
	private int size;
	private int index;


	public $var.className$($var.collectionType$ col$if(var.hasOwnMod)$, int offStartIndex$endif$) {
		this(col, 0, col.$var.sizeGetter$, $if(var.hasOwnMod)$offStartIndex$else$0$endif$);
	\}


	/** Create an iterator over a sub-set of an array.<br>
	 * NOTE: the array is not copied, modifications to the array will be reflected in this iterator.
	 * @param col the array of values to iterate over
	 * @param off the minimum index
	 * @param len maximum iterator index is {@code len + off\} 
	 * @param offStartIndex the index to begin the iterator at
	 * false to thrown an {@link UnsupportedOperationException\}
	 */
	public $var.className$($var.collectionType$ col, int off, int len, int offStartIndex) {
$if(var.hasCollMod)$		this.modCached = col.mod;
$endif$		this.col = col;
		this.off = off;
		this.size = off + len;
		this.index = off + offStartIndex - 1; // start at the previous index since next() is called get the first item
	\}


	@Override
	public boolean hasNext() {
		checkMod();
		return index < size - 1;
	\}


	@Override
	public $var.type$ next() {
		checkMod();
		if(index >= size - 1) {
			throw new IllegalStateException("already at end of list");
		\}
		index++;
		$var.type$ val = ($var.type$)col$var.getterStart$index$var.getterEnd$;
		return val;
	\}


	@Override
	public boolean hasPrevious() {
		return index > off;
	\}


	@Override
	public $var.type$ previous() {
		checkMod();
		if(index <= off) {
			throw new IllegalStateException("already at beginning of list");
		\}
		index--;
		$var.type$ val = ($var.type$)col$var.getterStart$index$var.getterEnd$;
		return val;
	\}


	@Override
	public int nextIndex() {
		return index + 1 - off;
	\}


	@Override
	public int previousIndex() {
		return index - 1 - off;
	\}


	/** Unsupported by this implementation
	 * @throws UnsupportedOperationException
	 */
	@Override
	public void remove() {
		throw new UnsupportedOperationException("cannot modified immutable list iterator");
	\}


	/** Unsupported by this implementation
	 * @throws UnsupportedOperationException
	 */
	@Override
	public void set($var.type$ val) {
		throw new UnsupportedOperationException("cannot modified immutable list iterator");
	\}


	/** Unsupported by this implementation
	 * @throws UnsupportedOperationException
	 */
	@Override
	public void add($var.type$ e) {
		throw new UnsupportedOperationException("cannot modified immutable list iterator");
	\}


	protected final void checkMod() {
		if(modCached != $var.modGetter$) {
			throw new java.util.ConcurrentModificationException();
		\}
	\}


	protected final void updateMod() {
		modCached = $var.modGetter$;
	\}


	public void markModified() {
		$var.modGetter$++;
	\}

\}

>>
